This is a message for the Scorpion Virtual Machine Leave.

learn how to programin sh

Add file compilation for(.scorpion, .xso.sl) files upon packaging

Add file compression for(.xso, .xso.sl) files

Create a Scorpion debugger( make it act like the Java debugger [refrence old debugger for Scorpion & dalvik debugger])
    - Only activate if debugging is enabled

Scorpion VM parts
- Hardware Manager
- Notification Interface

TODO: Finish creating a ROBUST virtual machine for the Scorpion programming language
The Virtual machine must be quick, simple and firmly tested.

When running a executable file, decompile the SAR algo.
  - Decompress SAR file

Expand the tiny Security Framework the VM uses

Implement GPIO IO processing into the VM and check for raspbery pi constant to initalize methods

   #ifdef RASPBERRY_PI // this is an example find the real #def online
   
When implementing the GPIO processor be sure to implement a GPIOMapService
   have the map service tracK:
       - which pins ae active
       - The IO direction on each pin
       - and the last read IO signal (if applicabale)
   have map service require GPIO policy on digital... and pinshift methods
   if io processing was unsuccessful, return -1 else return 0
   SRC will be set to the io response from GPIOMapService methods and log what happened if io request 
   was unsuccessful.

    // pre define pin values above
    class GPIOMapService {
    
        std::map<int,bool,bool,int>* gpiomap; // int = the pin number | bool = the pin direction | bool = the pin state | int = the last read signal
        
         public:
            int pinSetup(); // sets the pins up to be used including mapping
            int digitalread(int pin);
            int digitalwrite(int pin, int value); // write to a gpio pin
            int digitalval(int pin); // get the digital value of a pin
            int setpinactive(int pin, bool io); // setup a GPIO pin to be used for io processing
            int pinshift(int pin);    // shift io direction of a gpio pin
            bool hasdir(bool require, int pin); // check to see if a pin can process the requested io signal (if dir is set to in a pin cant process a digital write)
            bool ispinavailable(int pin); // if the requested pin is available (you cannot set a pin active that is already active)
            int setpin_inactive(int pin); // set a pin to be inactive
    };

Make opcodes before performing the above operations

Add full .sar support (involves alot of memory mapping) 


