{"changed":true,"filter":false,"title":"scorpionvm.h","tooltip":"/scorpion/vm/scorpionvm.h","value":"#ifndef SCORPION_VM\n#define SCORPION_VM\n\n #include <string>\n #include \"exception.h\"\n #include \"../vm/scorpion_env.h\"\n #include \"security.h\"\n\n using namespace std;\n\n  #define HEAP_STANDARD 1000000  // 1,000 kb\n  #define STAT_REGS_NUM 10\n  #define VM_FLAG_SIZE 6\n\n  // register Identifiers\n  #define VREG_PC 0     // ---------------- Static Regs --------------------\n  #define VREG_SP 1   // stack pointer\n  #define VREG_SRC 2\n  #define VREG_EXC 3\n\n  #define VFLAG_IGNORE 0 // ---------------- Static flags -------------------\n  #define VFLAG_MTHDC  1 // method count (scope)\n  #define VFLAG_IFC 2\n  #define VFLAG_IF_IGNORE 3\n  #define VFLAG_LBL_IGNORE 4\n  #define VFLAG_NO 4 // do not run\n  #define VFLAG_IF_DEPTH 5\n\n  class ScorpionEnv;\n  class XSO;\n  \n  class ScorpionVM {\n      long SREG_SIZE;\n         \n      public:\n         long *vStaticRegs;\n         bool initializing;\n         int status;\n         int loop, func, _try;\n         long *flags; // ignore, mthdc, if_block, if_ignore\n         int setRegs(long sz){\n             vStaticRegs = new (nothrow) long[sz];\n             if(vStaticRegs == nullptr)\n                return -1; \n\n             return 0;\n         }\n         long getSRegSize(){\n            return SREG_SIZE;\n         }\n         // Make heap processor namespace\n  };\n  \n  struct option {\n    bool Assert;\n    double  minHeap;\n    double  maxHeap;\n    bool Debug;\n    string XSOF;\n    string SARF;\n    string *ags;\n    int ags_t;\n    bool out;\n  };\n  \n  class ScorpionEnv;\n  \n  \n  struct initdata;\n  extern initdata idata;\n  \n  extern option options;\n  extern void Init_CreateScorpionVM(ScorpionVM vm, ScorpionEnv* env, XSO* xso, const char** args, int ags_t);\n  extern int Init_StartScorpionVM();\n  extern void Init_ShutdownScorpionVM();\n\n#endif // SCORPION_VM\n","undoManager":{"mark":-2,"position":2,"stack":[[{"start":{"row":30,"column":0},"end":{"row":31,"column":103},"action":"remove","lines":["","  // TODO: setup entire Virtual machine (static constants, helper functions, flags &status identifiers)"],"id":1}],[{"start":{"row":29,"column":12},"end":{"row":30,"column":0},"action":"remove","lines":["",""],"id":2}],[{"start":{"row":29,"column":12},"end":{"row":30,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":30,"column":0},"end":{"row":30,"column":2},"action":"insert","lines":["  "]}]]},"ace":{"folds":[],"scrolltop":500.33336639404297,"scrollleft":0,"selection":{"start":{"row":77,"column":0},"end":{"row":77,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":169,"mode":"ace/mode/c_cpp"}},"timestamp":1444522206000}